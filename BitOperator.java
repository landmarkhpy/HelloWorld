//位运算
//
public class BitOperator {
	
	//编写一个main方法
	public static void main(String[] args) {
		//推导过程
		//1. 先得到 2 的补码 => 2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010
		// 正数的原码，反码，补码都一样
		//2. 3的补码 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011
		//3. 按位& （两位全为1，结果为1，否则为0）
		//   00000000 00000000 00000000 00000010
		//   00000000 00000000 00000000 00000011
		//   00000000 00000000 00000000 00000010  (补码)
		//运算后的原码  00000000 00000000 00000000 00000010
		//   结果 2   
		System.out.println(2&3);
		
		//~-2 = ?
		//1. -2 的原码 10000000 00000000 00000000 00000010
		// 负数的补码=它的反码+1
		//2. -2的 反码 11111111 11111111 11111111 11111101
		//3. -2的 补码 11111111 11111111 11111111 11111100
		//4.~-2 结果   00000000 00000000 00000000 00000001
		// 结果 1
		System.out.println(~-2);
	    
		// ~2 = ? 
		// 2的原码    00000000 00000000 00000000 00000010
		// 2的补码    00000000 00000000 00000000 00000010
		//运算后补码  11111111 11111111 11111111 11111101
		// 负数的反码=负数的补码-1 11111111 11111111 11111111 11111100
		// 原码       00000000 00000000 00000000 00000011 =>-3
		System.out.println(~2);
		
		
		
		
		// 2|3=?
		// 2的原码 00000000 00000000 00000000 00000010
		// 正数 原码 补码 反码 一样   
		// 3的原码 00000000 00000000 00000000 00000011
		// 按位或：两个有一个为1，结果为1，否则为0
		//2的补码 00000000 00000000 00000000 00000010
		//3的补码 00000000 00000000 00000000 00000011
		//结果    00000000 00000000 00000000 00000011
		//结果 1
		System.out.println(2|3);
		
		// 2^3 = ?
		//2的原码 00000000 00000000 00000000 00000010
		//3的原码 00000000 00000000 00000000 00000011
		//相同二进制位进行运算，结果是0:1^1=0，0^0=0不相同二进制位“运算结果是1。1^0=1，0^1=1
		//2的补码 00000000 00000000 00000000 00000010
		//3的补码 00000000 00000000 00000000 00000011
		//运算结果00000000 00000000 00000000 00000001
		//结果 1
		System.out.println(2^3);
	}
}